---
- hosts: kube_master, kube_node
  serial: 1
  remote_user: "{{ rmt_usr }}"
  # become: yes
  vars:
    ansible_python_interpreter: /usr/bin/python3
  tasks:
    - name: apt package update and upgrade
      become: yes
      ansible.builtin.apt:
        update_cache: yes
        upgrade: yes
        cache_valid_time: 86400 # Only run if cache is older than 24hrs
      environment:
        UCF_FORCE_CONFFOLD: "1"

    - name: Install apt-transport-https, curl and containerd
      become: yes
      ansible.builtin.apt:
        pkg:
          - apt-transport-https
          - curl
          - containerd
        state: present
        update_cache: yes

    # - name: Install containerd
    #   become: yes
    #   ansible.builtin.apt:
    #     pkg:
    #       - containerd 
    #     state: present 

    - name: Create containerd configuration directory
      become: yes
      ansible.builtin.file:
        path: /etc/containerd
        state: directory
        mode: '0755'

    - name: Generate default containerd configuration and set SystemdCgroup to true
      become: yes
      ansible.builtin.shell: |
        containerd config default > /etc/containerd/config.toml
      args:
        creates: /etc/containerd/config.toml

    # - name: Set SystemdCgroup to true
    #   become: yes
    #   ansible.builtin.shell: sed -i 's|SystemdCgroup = false|SystemdCgroup = true|' /etc/containerd/config.toml

    - name: Set SystemdCgroup to true
      become: yes
      ansible.builtin.replace:
        path: /etc/containerd/config.toml
        regexp: 'SystemdCgroup = false'
        replace: 'SystemdCgroup = true'
        backup: yes 

    # - name: Change sandbox image version to 3.10.1
    #   become: yes
    #   ansible.builtin.shell: sed -i 's|sandbox_image = "registry.k8s.io/pause:3.8"|sandbox_image = "registry.k8s.io/pause:3.10.1"|' /etc/containerd/config.toml

    - name: Set SystemdCgroup to true
      become: yes
      ansible.builtin.replace:
        path: /etc/containerd/config.toml
        regexp: 'sandbox_image = "registry.k8s.io/pause:3.8'
        replace: 'sandbox_image = "registry.k8s.io/pause:3.10.1'
        backup: yes 

    - name: Restart and set auto start containerd service
      become: yes
      ansible.builtin.systemd:
        name: containerd
        state: restarted
        enabled: yes
      
    - name: Disable swap
      become: yes
      shell: swapoff -a
      when: ansible_swaptotal_mb > 0 # Run if swap is enabled

    - name: Remove swap reference from fstab
      become: yes
      ansible.builtin.replace:
        path: /etc/fstab
        regexp: '^(\s*)([^#\n]+\s+)(\w+\s+)swap(\s+.*)$'
        replace: '#\1\2\3swap\4'
        backup: yes 

    #- name: Download Kubernetes GPG key
    #  ansible.builtin.get_url:
    #    url: https://pkgs.k8s.io/core:/stable:/v1.34/deb/Release.key # Adjust version as needed
    #    dest: /tmp/kubernetes-release.key
    #    mode: '0644'

    #- name: Convert GPG key to dearmored format
    #  ansible.builtin.shell: >
    #    gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg /tmp/kubernetes-release.key
    #  args:
    #    creates: /etc/apt/keyrings/kubernetes-apt-keyring.gpg
    
    - name: Download Kubernetes GPG key and convert to dearmored format
      ansible.builtin.shell:
        curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.34/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
      args:
        creates: /etc/apt/keyrings/kubernetes-apt-keyring.gpg

    - name: Set permissions for Kubernetes APT keyring
      become: yes
      ansible.builtin.file:
        path: /etc/apt/keyrings/kubernetes-apt-keyring.gpg
        mode: '0644'

    - name: Create kubernetes source list
      become: yes
      ansible.builtin.shell:
        echo 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.34/deb/ /' | sudo tee /etc/apt/sources.list.d/kubernetes.list
      args:
        creates: /etc/apt/sources.list.d/kubernetes.list

    - name: Set permissions for Kubernetes source list
      become: yes
      ansible.builtin.file:
        path: /etc/apt/sources.list.d/kubernetes.list
        mode: '0644'

    - name: Install kubelet kubeadm kubectl
      become: yes
      ansible.builtin.apt:
        pkg:
          - kubelet 
          - kubeadm
          - kubectl 
        state: present
        update_cache: true

    - name: Enable IPv4 packet forwarding
      become: yes
      ansible.builtin.shell: |
        cat <<EOF | sudo tee /etc/sysctl.d/k8s.conf
        net.bridge.bridge-nf-call-ip6tables = 1
        net.bridge.bridge-nf-call-iptables = 1
        net.ipv4.ip_forward = 1
        EOF

    - name: Load system config files
      become: yes
      ansible.builtin.shell: sysctl --system

    - name: Enable ip-in-ip
      become: yes
      ansible.builtin.shell: iptables -A INPUT -p 4 -j ACCEPT

    - name: Install iptables-persistent
      become: yes
      ansible.builtin.shell: |
        echo iptables-persistent iptables-persistent/autosave_v4 boolean true | sudo debconf-set-selections
        echo iptables-persistent iptables-persistent/autosave_v6 boolean true | sudo debconf-set-selections
        apt -y install iptables-persistent

    - name: Save iptable rules
      become: yes
      ansible.builtin.shell: netfilter-persistent save

    - name: Run kubeadm init
      become: yes
      ansible.builtin.shell: kubeadm init --pod-network-cidr=192.168.0.0/16
      when: inventory_hostname in groups['kube_master']

    - name: Create .kube directory
      ansible.builtin.file:
        path: "{{ ansible_env.HOME }}/.kube"
        state: directory
        mode: '0755'
      when: inventory_hostname in groups['kube_master']

    - name: Copy kubeconfig file and change owner
      become: yes
      ansible.builtin.copy:
        remote_src: yes
        src: /etc/kubernetes/admin.conf
        dest: "{{ ansible_env.HOME }}/.kube/config"
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: '0600' 
      when: inventory_hostname in groups['kube_master']

    #- name: Copy kubeconfig file
    #  become: yes
    #  ansible.builtin.shell: |
    #    "cp -i /etc/kubernetes/admin.conf {{ ansible_env.HOME }}/.kube/config"
    #    chown $(id -u):$(id -g) $HOME/.kube/config
    #  when: inventory_hostname in groups['kube_master']

    - name: Setup Tigera operator for Calico CNI
      ansible.builtin.shell: kubectl create -f https://raw.githubusercontent.com/projectcalico/calico/v3.30.3/manifests/tigera-operator.yaml
      register: tigera_output
      when: inventory_hostname in groups['kube_master']

    # - name: Debug tigera output
    #   ansible.builtin.debug:
    #     var: tigera_output
    #   when: inventory_hostname in groups['kube_master']

    - name: Pause for 30 seconds for Tigera operator setup
      ansible.builtin.pause:
        seconds: 30
      when: inventory_hostname in groups['kube_master']

    - name: Setup Calico CNI
      ansible.builtin.shell: kubectl create -f https://raw.githubusercontent.com/projectcalico/calico/v3.30.3/manifests/custom-resources.yaml
      register: calico_output
      when: inventory_hostname in groups['kube_master']

    # - name: Debug calico output
    #   ansible.builtin.debug:
    #     var: calico_output

    - name: Generate and save kubeadm join command
      become: yes
      ansible.builtin.shell: kubeadm token create --print-join-command
      register: kube_join_output
      when: inventory_hostname in groups['kube_master']
      run_once: true

    # - name: Debug join output
    #   ansible.builtin.debug:
    #     var: kube_join_output
    #   when: inventory_hostname in groups['kube_master']

    - name: Set kubeadm_join_command fact for worker nodes
      ansible.builtin.set_fact: 
        kube_join_command: "{{ hostvars['master']['kube_join_output'].stdout }}"
      when: inventory_hostname in groups['kube_node']

    # - name: Debug join command
    #   ansible.builtin.debug:
    #     var: kube_join_command
    #   when: inventory_hostname in groups['kube_node']

    - name: Run join command
      become: yes
      ansible.builtin.shell: "{{ kube_join_command }}"
      when: inventory_hostname in groups['kube_node']
